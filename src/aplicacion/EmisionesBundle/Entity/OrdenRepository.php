<?php

namespace aplicacion\EmisionesBundle\Entity;

use Doctrine\ORM\EntityRepository;



/**
 * OrdenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrdenRepository extends EntityRepository
{
    public function TotalEstados(\DateTime $inicio=null, \DateTime $fin=null,$estado=null, $counter=null)
    {
        //print_r($inicio->format('d-M-Y').'-------'.$fin);exit;
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('count(orden.id)');
        $qb->from('EmisionesBundle:Orden','orden');
        $qb->andWhere('orden.fecha between :inicio AND :fin');        
        if(is_null($inicio))
        {
           $qb->setParameter('inicio', new \DateTime('00:00:00'));
        }
        else
        {
           $qb->setParameter('inicio', $inicio);
        }
        if(is_null($fin))
        {
           $qb->setParameter('fin', new \DateTime('23:59:59'));  
        }
        else
        {
           $qb->setParameter('fin', $fin);  
        }
        if(!is_null($estado))
        {
           $qb->andWhere('orden.estado = :estado');
           $qb->setParameter('estado', $estado); 
        }
        if(!is_null($counter))
        {
           $qb->andWhere('orden.usuario = :counter');
           $qb->setParameter('counter', $counter); 
        }
         
        return $qb->getQuery()->getSingleScalarResult();
    }
    public function TotalEstadosConciliacion($inicio=null, $fin=null,$estadoConciliacion=null,$estadoOrden=null)
    {
        //print_r($inicio->format('d-M-Y').'-------'.$fin);exit;
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('count(orden.id)');
        $qb->from('EmisionesBundle:Orden','orden');
        $qb->andWhere('orden.fecha between :inicio AND :fin');        
        if(is_null($inicio))
        {
           $qb->setParameter('inicio', new \DateTime('00:00:00'));
        }
        else
        {
           $qb->setParameter('inicio', $inicio);
        }
        if(is_null($fin))
        {
           $qb->setParameter('fin', new \DateTime('23:59:59'));  
        }
        else
        {
           $qb->setParameter('fin', $fin);  
        }
        if(!is_null($estadoConciliacion))
        {
           $qb->andWhere('orden.aprobadoCaja = :estadoConciliacion');
           $qb->setParameter('estadoConciliacion', $estadoConciliacion); 
        }
        if(!is_null($estadoOrden))
        {
           $qb->andWhere('orden.estado = :estado');
           $qb->setParameter('estado', $estadoOrden); 
        }
         
        return $qb->getQuery()->getSingleScalarResult();
    }
   public function timeAverageEmision(\DateTime $inicio=null, \DateTime $fin=null,$estado=null, $counter=null,$empresa=null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
       
           $qb->select('avg(TIME_DIFF(traza.loggedAt,orden.fecha))')
           ->from('EmisionesBundle:Orden','orden')
           ->innerJoin('AuditoriaBundle:Traza', 'traza','WITH','traza.objectId=orden.id')
           ->innerJoin('EmisionesBundle:Emision', 'emision','WITH','emision.id=orden.id')
           ->andWhere($qb->expr()->like('traza.data',  $qb->expr()->literal('%estado%')))
           ->andWhere('orden.fecha between :inicio AND :fin');
        
            if(is_null($inicio))
            {
               $qb->setParameter('inicio', new \DateTime('00:00:00'));
            }
            else
            {
               $qb->setParameter('inicio', $inicio);
            }
            if(is_null($fin))
            {
               $qb->setParameter('fin', new \DateTime('23:59:59'));  
            }
            else
            {
               $qb->setParameter('fin', $fin);  
            }
            if(!is_null($estado))
            {
               $qb->andWhere('orden.estado = :estado');
               $qb->setParameter('estado', $estado); 
            }
           if(!is_null($counter))
            {
               $qb->andWhere('orden.usuario = :counter');
               $qb->setParameter('counter', $counter); 
            }
          if(!is_null($empresa))
            {
               $qb->andWhere('orden.empresa = :empresa');
               $qb->setParameter('empresa', $empresa); 
            }
        
       return $qb->getQuery()->getSingleScalarResult();
        
    }
   public function timeAverageRevision(\DateTime $inicio=null, \DateTime $fin=null,$estado=null, $counter=null,$empresa=null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
       
           $qb->select('avg(TIME_DIFF(traza.loggedAt,orden.fecha))')
           ->from('EmisionesBundle:Orden','orden')
           ->innerJoin('AuditoriaBundle:Traza', 'traza','WITH','traza.objectId=orden.id')
           ->innerJoin('EmisionesBundle:Revision', 'revision','WITH','revision.id=orden.id')
           ->andWhere($qb->expr()->like('traza.data',  $qb->expr()->literal('%estado%')))
           ->andWhere('orden.fecha between :inicio AND :fin');
        
            if(is_null($inicio))
            {
               $qb->setParameter('inicio', new \DateTime('00:00:00'));
            }
            else
            {
               $qb->setParameter('inicio', $inicio);
            }
            if(is_null($fin))
            {
               $qb->setParameter('fin', new \DateTime('23:59:59'));  
            }
            else
            {
               $qb->setParameter('fin', $fin);  
            }
            if(!is_null($estado))
            {
               $qb->andWhere('orden.estado = :estado');
               $qb->setParameter('estado', $estado); 
            }
           if(!is_null($counter))
            {
               $qb->andWhere('orden.usuario = :counter');
               $qb->setParameter('counter', $counter); 
            }
           if(!is_null($empresa))
            {
               $qb->andWhere('orden.empresa = :empresa');
               $qb->setParameter('empresa', $empresa); 
            }
        
       return $qb->getQuery()->getSingleScalarResult();
        
    }
   public function timeAverageAnulacion(\DateTime $inicio=null, \DateTime $fin=null,$estado=null, $counter=null,$empresa=null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
       
           $qb->select('avg(TIME_DIFF(traza.loggedAt,orden.fecha))')
           ->from('EmisionesBundle:Orden','orden')
           ->innerJoin('AuditoriaBundle:Traza', 'traza','WITH','traza.objectId=orden.id')
           ->innerJoin('EmisionesBundle:Anulacion', 'anulacion','WITH','anulacion.id=orden.id')
           ->andWhere($qb->expr()->like('traza.data',  $qb->expr()->literal('%estado%')))
           ->andWhere('orden.fecha between :inicio AND :fin');
        
            if(is_null($inicio))
            {
               $qb->setParameter('inicio', new \DateTime('00:00:00'));
            }
            else
            {
               $qb->setParameter('inicio', $inicio);
            }
            if(is_null($fin))
            {
               $qb->setParameter('fin', new \DateTime('23:59:59'));  
            }
            else
            {
               $qb->setParameter('fin', $fin);  
            }
            if(!is_null($estado))
            {
               $qb->andWhere('orden.estado = :estado');
               $qb->setParameter('estado', $estado); 
            }
           if(!is_null($counter))
            {
               $qb->andWhere('orden.usuario = :counter');
               $qb->setParameter('counter', $counter); 
            }
          if(!is_null($empresa))
            {
               $qb->andWhere('orden.empresa = :empresa');
               $qb->setParameter('empresa', $empresa); 
            }
       return $qb->getQuery()->getSingleScalarResult();
    }

    /*
     * Funcion que me devuelve los counter que no estan bloqueados
     * con sus respectivos tiempos promedios cumpliendo con los param pasados  
     */
    public function globalAverage($estado=null,$empresa=null,$emergencia=false,\DateTime $inicio=null, \DateTime $fin=null)
    {
         $qb = $this->getEntityManager()->createQueryBuilder();
         $qb->select('u.id,u.nombre,u.apellidos,u.username')
            ->addSelect("(SELECT avg(TIME_DIFF(traza.loggedAt,emision.fecha))
                FROM EmisionesBundle:Emision emision
                INNER JOIN AuditoriaBundle:Traza traza WITH  traza.objectId=emision.id                             
                WHERE traza.data LIKE '%estado%' and emision.fecha between :inicio AND :fin
                and emision.usuario = u.id
                ) AS TAE"
                )
            ->addSelect("(SELECT avg(TIME_DIFF(trazar.loggedAt,revision.fecha))
                FROM EmisionesBundle:Revision revision
                INNER JOIN AuditoriaBundle:Traza trazar WITH  trazar.objectId=revision.id                             
                WHERE trazar.data LIKE '%estado%' and revision.fecha between :inicio AND :fin
                and revision.usuario = u.id
                ) AS TAR"
                )
            ->addSelect("(SELECT avg(TIME_DIFF(trazaa.loggedAt,anulacion.fecha))
                FROM EmisionesBundle:Anulacion anulacion
                INNER JOIN AuditoriaBundle:Traza trazaa WITH  trazaa.objectId=anulacion.id                             
                WHERE trazaa.data LIKE '%estado%' and anulacion.fecha between :inicio AND :fin
                and anulacion.usuario = u.id
                ) AS TAA"
                ) 
            ->from("EmisionesBundle:Usuariointerno", 'u')
            ->andwhere($qb->expr()->like('u.roles', $qb->expr()->literal("%ROLE_COUNTER%")))
            //
            ->andWhere('u.empresa = :empresa')
            ->andWhere('u.locked = :lock');
         
            $qb->setParameter('empresa', $empresa);
            $qb->setParameter('lock',$estado);
            $qb->setParameter('inicio', $inicio); 
            $qb->setParameter('fin', $fin); 
            if(!$emergencia)
            {
              $qb->andWhere('u.id != :idemergencia')->setParameter('idemergencia',701);
            }
         
        return $qb->getQuery()->getArrayResult();
    }
    public function totalOrdenes($empresa_id=null,$estado=null,$conciliacion=null,$inicio=null,$fin=null)
    {
        
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('count (orden)')
           ->from("EmisionesBundle:Orden", 'orden')
           ->andWhere('orden.fecha between :inicio AND :fin');;
        if(!is_null($empresa_id))
        {
           $qb->andWhere('orden.empresa=:empresa')->setParameter('empresa', $empresa_id);
        }
        if(is_null($inicio))
        {
           $qb->setParameter('inicio', new \DateTime('00:00:00'));
        }
        else
        {
           $qb->setParameter('inicio', new \DateTime($inicio));
        }
        if(is_null($fin))
        {
           $qb->setParameter('fin', new \DateTime('23:59:59'));  
        }
        else
        {
           $qb->setParameter('fin',new \DateTime($fin));  
        }
        if(!is_null($estado))
        {
           $qb->andWhere('orden.estado=:estado')->setParameter('estado', $estado); 
        }
        if(!is_null($conciliacion))
        {
           $qb->andWhere('orden.aprobadoCaja=:conciliacion')->setParameter('conciliacion', $conciliacion); 
        }
      return $qb->getQuery()->getSingleScalarResult();
    }

}
